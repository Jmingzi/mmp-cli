#!/usr/bin/env node

const { print } = require('../lib/utils/output.js')
const chalk = require('chalk')
const program = require('commander')
const check = require('../lib/checkVersion')

program
  .version(require('../package').version)
  .usage('<command> [options]')

program
    .command('init')
    .usage('<command>')
    .description('配置初始化，命令配置只支持package.json中存在的')
    .action(() => {
      check().then(() => {
        require('../lib/init.js')()
      })
    })

program
    .command('build')
    .usage('<command>')
    .description('在master、develop分支上打包并提交')
    .action(() => {
      check().then(() => {
        require('../lib/build.js')()
      })
    })

program
  .command('ci [branch]')
  .usage('<command> [branch]')
  .description('一键处理提交')
  .action((branch) => {
    check().then(() => {
      require('../lib/commit.js')(branch)
    })
  })

program
    .command('cp [commit_id] [branch]')
    .usage('<command> [commit_id] [branch]')
    .description('cherry-pick 到目标分支，只能pick最近10条提交')
    .action((commit_id, branch, cmd) => {
      if (commit_id && branch) {
        check().then(() => {
          require('../lib/commit.js')(branch, commit_id)
        })
      } else {
        cmd.help()
      }
    })

// output help information on unknown commands
program
  .arguments('<command>')
  .action((cmd) => {
    program.outputHelp()
    console.log(`  ` + chalk.red(`未知命令 ${chalk.yellow(cmd)}.`))
    console.log()
  })

program.parse(process.argv)

if (!process.argv.slice(2).length) {
  print()(
      '   mmp git工作流快捷工具，使用mmp -h查看更多'
  )
}

