#!/usr/bin/env node
const chalk = require('chalk')
const program = require('commander')
const colors = require('colors/safe')

// const { print } = require('../lib/utils/output.js')
const { commit, cherryPick } = require('../lib-dist/commit.js')
const { check } = require('../lib-dist/check-version')

program
  .version(require('../package').version)
  .usage('<command> [options]')

program
  .command('init')
  .usage('<command>')
  .description('配置初始化，命令配置只支持package.json中存在的')
  .action(() => {
    check().then(() => {
      // require('../lib/init.js')()
      require('../lib-dist/init.js').initConfig()
    })
  })

program
  .command('build')
  .usage('<command>')
  .description('在master、develop分支上打包并提交')
  .action(() => {
    check().then(() => {
      // require('../lib/build.js')()
      require('../lib-dist/build.js')(true)
    })
  })

program
  .command('ls')
  .usage('<command>')
  .description('列出当前配置')
  .action(() => {
    check().then(() => {
      require('../lib/ls.js')()
    })
  })

program
  .command('ci [branch]')
  .usage('<command> [branch]')
  .description('一键处理提交')
  .action((branch) => {
    check().then(() => {
      commit(branch)
      // require('../lib/commit.js')(branch)
    })
  })

program
  .command('cp [commit_id] [branch]')
  .usage('<command> [commit_id] [branch]')
  .description('cherry-pick 到目标分支，只能pick最近10条提交')
  .action((commit_id, branch, cmd) => {
    if (commit_id && branch) {
      check().then(() => {
        // require('../lib/commit.js')(branch, commit_id)
        cherryPick(commit_id, branch)
      })
    } else {
      cmd.help()
    }
  })

program
  .command('set [branch_cmd]')
  .usage('<command>')
  .description('设置单项配置 set master="npm run build"')
  .action((branch_cmd, cmd) => {
    if (branch_cmd && /=/.test(branch_cmd)) {
      const arr = branch_cmd.split('=')
      if (arr.length !== 2) {
        cmd.help()
        process.exit(1)
      }
      // if (/ /.test(arr[1]) && /^`$/.test(arr[1]))
      check().then(() => {
        require('../lib/setConfig.js').setBrCmd(arr[0], arr[1])
      })
    } else {
      cmd.help()
    }
  })

program
  .command('add [branch]')
  .usage('<command>')
  .description('新增主分支')
  .action((branch, cmd) => {
    if (branch) {
      check().then(() => {
        require('../lib/setConfig.js').addBr(branch)
      })
    } else {
      cmd.help()
    }
  })

// output help information on unknown commands
program
  .arguments('<command>')
  .action((cmd) => {
    program.outputHelp()
    console.log(`  ` + chalk.red(`未知命令 ${chalk.yellow(cmd)}.`))
    console.log()
  })

program.parse(process.argv)

if (!process.argv.slice(2).length) {
  console.log(colors.grey('   mmp git 工作流快捷工具，使用 mmp -h 查看更多'))
}

