#!/usr/bin/env node
const chalk = require('chalk')
const program = require('commander')
const colors = require('colors/safe')
const { check } = require('../lib/check-version')

program
  .version(require('../package').version)
  .usage('<command> [options]')

program
  .command('ci [branch]')
  .usage('<command> [branch]')
  .description('提交改动到 [branch] 分支')
  .action((branch) => {
    check().then(() => {
      require('../lib/commit.js').commit(branch)
    })
  })

program
  .command('cp [commit_start_id] [commit_end_id] [branch]')
  .option('-s, --single', 'cherry pick single one')
  .usage('<command> [commit_start_id] [commit_end_id] [branch]')
  .description('cherry-pick 最近20条commit范围内的提交到[branch]分支，commit_start_id 可选')
  .action((commit_start_id, commit_end_id, branch, cmd) => {
    let start
    let end
    if (branch) {
      if (commit_start_id && commit_end_id) {
        start = commit_start_id
        end = commit_end_id
      } else if (commit_start_id || commit_end_id) {
        end = commit_start_id || commit_end_id
      }
    } else {
      end = commit_start_id
      branch = commit_end_id
    }

    if (end && branch) {
      if (cmd.single) {
        // cherry-pick commitEndId
        start = end
      }

      check().then(() => {
        require('../lib/commit.js').cherryPick(end, branch, start)
      })
    } else {
      cmd.help()
    }
  })

program
  .command('ls')
  .usage('<command>')
  .description('列出当前项目配置')
  .action(() => {
    check().then(() => {
      require('../lib/init.js').ls()
    })
  })

program
  .command('init')
  .usage('<command>')
  .description('配置初始化')
  .action(() => {
    check().then(() => {
      require('../lib/init.js').initConfig()
    })
  })

program
  .command('build')
  .usage('<command>')
  .description('在主分支上执行打包并提交')
  .action(() => {
    check().then(() => {
      require('../lib/build.js')(true)
    })
  })

// program
//   .command('set [branch_cmd]')
//   .usage('<command>')
//   .description('设置单项配置 set master="npm run build"')
//   .action((branch_cmd, cmd) => {
//     if (branch_cmd && /=/.test(branch_cmd)) {
//       const arr = branch_cmd.split('=')
//       if (arr.length !== 2) {
//         cmd.help()
//         process.exit(1)
//       }
//       // if (/ /.test(arr[1]) && /^`$/.test(arr[1]))
//       check().then(() => {
//         require('../lib/init.js').setBrCmd(arr[0], arr[1])
//       })
//     } else {
//       cmd.help()
//     }
//   })
program
  .command('set [branch] [value]')
  .usage('<command>')
  .description('设置单项配置 set master "npm run build"')
  .action((branch, value, cmd) => {
    if (branch && value) {
      check().then(() => {
        require('../lib/init.js').setBrCmd(branch, value)
      })
    } else {
      cmd.help()
    }
  })

program
  .command('add [value]')
  .option('-f, --file', '添加需要校验 pr 的文件路径')
  .option('-b, --branch', '添加需要校验 pr 的分支')
  .usage('<command> <option>')
  .description('新增配置')
  .action((value, cmd) => {
    if (value) {
      check().then(() => {
        require('../lib/init.js').addConfig(value, cmd.file ? 'prfile' : cmd.branch ? 'prbranch' : 'branch')
      })
    } else {
      cmd.help()
    }
  })

program
  .command('del [value]')
  .option('-f, --file', '删除需要校验 pr 的文件路径')
  .option('-b, --branch', '删除需要校验 pr 的分支')
  .usage('<command>')
  .description('删除配置')
  .action((value, cmd) => {
    if (value) {
      check().then(() => {
        require('../lib/init.js').delConfig(value, cmd.file ? 'prfile' : cmd.branch ? 'prbranch' : 'branch')
        // require('../lib/init.js').delMainBr(branch)
      })
    } else {
      cmd.help()
    }
  })

// TODO
// program
//   .command('cp-continue')
//   .usage('<command>')
//   .description('删除项目配置')
//   .action(() => {
//     check().then(() => {
//       require('../lib/init.js').delProject()
//     })
//   })

// output help information on unknown commands
program
  .arguments('<command>')
  .action((cmd) => {
    program.outputHelp()
    console.log(`  ` + chalk.red(`未知命令 ${chalk.yellow(cmd)}.`))
    console.log()
  })

program.parse(process.argv)

if (!process.argv.slice(2).length) {
  console.log(colors.grey('   mmp git 工作流快捷工具，使用 mmp -h 查看更多'))
}

